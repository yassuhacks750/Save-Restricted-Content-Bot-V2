# Copyright (c) 2025 devgagan : https://github.com/devgaganin.
# Licensed under the GNU General Public License v3.0.

from shared_client import app
from pyrogram import filters
from pyrogram.errors import UserNotParticipant
from pyrogram.types import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from config import FORCE_SUB, OWNER_ID

# тЬЕ Force Subscribe Check
async def subscribe(client, message):
    if FORCE_SUB:
        try:
            user = await client.get_chat_member(FORCE_SUB, message.from_user.id)
            if str(user.status) == "ChatMemberStatus.BANNED":
                await message.reply_text("ЁЯЪл рдЖрдк рдЗрд╕ рдЪреИрдирд▓ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рд╣реИрдВред рдХреГрдкрдпрд╛ рдЯреАрдо SPY рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред")
                return 1
        except UserNotParticipant:
            await message.reply_photo(
                photo="https://graph.org/file/d44f024a08ded19452152.jpg",
                caption="ЁЯФТ рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рд╕реЗ рдЬреБрдбрд╝реЗрдВред",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ЁЯУв Join Channel", url=f"https://t.me/quiz_zone_new")]
                ])
            )
            return 1
        except Exception as e:
            await message.reply_text(f"тЭМ рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛: `{e}`")
            return 1
    return 0

# тЬЕ /start command
@app.on_message(filters.command("start") & filters.private)
async def start(client, message):
    join = await subscribe(client, message)
    if join == 1:
        return

    await message.reply_text(
        "**ЁЯСЛ Welcome to Save Restricted Bot!**\n\n"
        "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ рд╡рд┐рднрд┐рдиреНрди рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдо рд╕реЗ рд╡реАрдбрд┐рдпреЛ рдФрд░ рдореАрдбрд┐рдпрд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВред\n\n"
        "ЁЯУМ рдХрдорд╛рдВрдб рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рднреЗрдЬреЗрдВред\n\n"
        "__Developed by Team SPY__",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЛ Help", callback_data="help_next_0")],
            [InlineKeyboardButton("ЁЯУв Channel", url="https://t.me/quiz_zone_new")],
        ])
    )

# тЬЕ /help pages
help_pages = [
    (
        "**ЁЯУШ Help Menu (1/2):**\n\n"
        "тАв /start - рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ\n"
        "тАв /help - рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рджреЗрдЦреЗрдВ\n"
        "тАв /login - рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ\n"
        "тАв /batch - рдмреИрдЪ рдореЗрдВ рд▓рд┐рдВрдХ рдПрдХреНрд╕рдЯреНрд░реИрдХреНрдЯ рдХрд░реЗрдВ\n"
        "тАв /adl - рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ\n"
        "тАв /dl - рд╡реАрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ\n"
        "тАв /logout - рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░реЗрдВ\n"
        "тАв /cancel - рдХрд┐рд╕реА рднреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЛ рд░рджреНрдж рдХрд░реЗрдВ"
    ),
    (
        "**ЁЯУШ Help Menu (2/2):**\n\n"
        "тАв /add user_id - рдкреНрд░реАрдорд┐рдпрдо рдпреВрдЬрд╝рд░ рдЬреЛрдбрд╝реЗрдВ\n"
        "тАв /rem user_id - рдкреНрд░реАрдорд┐рдпрдо рд╕реЗ рд╣рдЯрд╛рдПрдБ\n"
        "тАв /transfer user_id - рдкреНрд░реАрдорд┐рдпрдо рдЯреНрд░рд╛рдВрд╕рдлрд░ рдХрд░реЗрдВ\n"
        "тАв /status - рдкреЗрдореЗрдВрдЯ рд╕реНрдЯреЗрдЯрд╕ рджреЗрдЦреЗрдВ\n"
        "тАв /plan - рдкреНрд░реАрдорд┐рдпрдо рдкреНрд▓рд╛рдиреНрд╕ рджреЗрдЦреЗрдВ\n"
        "тАв /terms - рдирд┐рдпрдо рд╡ рд╢рд░реНрддреЗрдВ рджреЗрдЦреЗрдВ\n"
        "__тЪЩя╕П Settings & Customization available using `/settings`__"
    )
]

# тЬЕ Help Navigation
async def send_or_edit_help_page(_, message, page_number):
    if page_number < 0 or page_number >= len(help_pages):
        return

    buttons = []
    if page_number > 0:
        buttons.append(InlineKeyboardButton("тЧАя╕П Previous", callback_data=f"help_prev_{page_number}"))
    if page_number < len(help_pages) - 1:
        buttons.append(InlineKeyboardButton("Next тЦ╢я╕П", callback_data=f"help_next_{page_number}"))

    keyboard = InlineKeyboardMarkup([buttons]) if buttons else None

    await message.reply_text(help_pages[page_number], reply_markup=keyboard)

@app.on_message(filters.command("help") & filters.private)
async def help(client, message):
    join = await subscribe(client, message)
    if join == 1:
        return
    await send_or_edit_help_page(client, message, 0)

@app.on_callback_query(filters.regex(r"help_(prev|next)_(\d+)"))
async def help_callback(client, callback_query):
    action, page_number = callback_query.data.split("_")[1:]
    page_number = int(page_number) - 1 if action == "prev" else int(page_number) + 1
    await send_or_edit_help_page(client, callback_query.message, page_number)
    await callback_query.answer()

# тЬЕ /terms command
@app.on_message(filters.command("terms") & filters.private)
async def terms(client, message):
    await message.reply_text(
        "**ЁЯУЬ Terms and Conditions:**\n\n"
        "тАв рд╣рдо рдХрд┐рд╕реА рднреА рдХреЙрдкреАрд░рд╛рдЗрдЯреЗрдб рдХрдВрдЯреЗрдВрдЯ рдХреЗ рд▓рд┐рдП рдЬрд╝рд┐рдореНрдореЗрджрд╛рд░ рдирд╣реАрдВ рд╣реИрдВред\n"
        "тАв рдкреЗрдореЗрдВрдЯ рдХрд░рдиреЗ рд╕реЗ рдмреЙрдЯ рдХреА рд╕реЗрд╡рд╛рдПрдВ рдирд┐рд╢реНрдЪрд┐рдд рдирд╣реАрдВ рд╣реЛрддреАрдВред\n"
        "тАв рд╣рдорд╛рд░реА рдорд░реНрдЬреА рд╕реЗ рд╣рдо рдХрд┐рд╕реА рднреА рдпреВрдЬрд╝рд░ рдХреЛ рд░реЛрдХ рдпрд╛ рдЪрд╛рд▓реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЛ See Plans", callback_data="see_plan")],
            [InlineKeyboardButton("ЁЯТм Contact Admin", url="https://t.me/kingofpatal")]
        ])
    )

# тЬЕ /plan command
@app.on_message(filters.command("plan") & filters.private)
async def plan(client, message):
    await message.reply_text(
        "**ЁЯТ░ Premium Plans:**\n\n"
        "тАв тВ╣200 рдпрд╛ $2 рд╕реЗ рд╢реБрд░реБрдЖрдд\n"
        "тАв 1 рд▓рд╛рдЦ рдлрд╛рдЗрд▓реЗрдВ рдкреНрд░рддрд┐ рдмреИрдЪ рдбрд╛рдЙрдирд▓реЛрдб\n"
        "тАв рдореЛрдбреНрд╕: /batch рдФрд░ /bulk\n",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЬ Terms", callback_data="see_terms")],
            [InlineKeyboardButton("ЁЯТм Contact Admin", url="https://t.me/kingofpatal")]
        ])
    )

# тЬЕ Callback for plans and terms
@app.on_callback_query(filters.regex("see_plan"))
async def see_plan(client, callback_query):
    await callback_query.message.edit_text(
        "**ЁЯТ░ Premium Plans:**\n\n"
        "тАв тВ╣200 рдпрд╛ $2 рд╕реЗ рд╢реБрд░реБрдЖрдд\n"
        "тАв 1 рд▓рд╛рдЦ рдлрд╛рдЗрд▓реЗрдВ рдкреНрд░рддрд┐ рдмреИрдЪ рдбрд╛рдЙрдирд▓реЛрдб\n"
        "тАв /batch рдФрд░ /bulk рдореЛрдбреНрд╕\n"
        "тАв рдФрд░ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ...",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЬ Terms", callback_data="see_terms")],
            [InlineKeyboardButton("ЁЯТм Contact Admin", url="https://t.me/kingofpatal")]
        ])
    )
    await callback_query.answer()

@app.on_callback_query(filters.regex("see_terms"))
async def see_terms(client, callback_query):
    await callback_query.message.edit_text(
        "**ЁЯУЬ Terms and Conditions:**\n\n"
        "тАв рдХрд┐рд╕реА рднреА рдкреНрд░рдХрд╛рд░ рдХреА рдХреЙрдкреАрд░рд╛рдЗрдЯ рдЙрд▓реНрд▓рдВрдШрди рдХреА рдЬрд┐рдореНрдореЗрджрд╛рд░реА рдпреВрдЬрд╝рд░ рдХреА рд╣реЛрдЧреАред\n"
        "тАв рдкреЗрдореЗрдВрдЯ рд╕реЗ рд╕реЗрд╡рд╛ рдХреА рдЧрд╛рд░рдВрдЯреА рдирд╣реАрдВ рд╣реЛрддреАред\n"
        "тАв рдмреИрди / рдЕрдкреНрд░реВрд╡рд▓ рд╣рдорд╛рд░реА рдорд░реНрдЬреА рдкрд░ рдирд┐рд░реНрднрд░ рдХрд░рддрд╛ рд╣реИред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЛ See Plans", callback_data="see_plan")],
            [InlineKeyboardButton("ЁЯТм Contact Admin", url="https://t.me/kingofpatal")]
        ])
    )
    await callback_query.answer()
